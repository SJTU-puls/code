#include <iostream> 
#define MAX_SIZE 100010
using namespace std;

template <class T>
class hfTree{
private:
    struct Node
    {
        T data;
        int weight;
        int parent,left,right;
    };

    Node *elem;
    int length;

public:
    struct hfCode{
        int value;
		T data;
    };
    hfTree(const int *w,int size);
    void getCode(hfCode result[]);
    ~hfTree(){delete []elem;};
};

template<class T>
hfTree<T>::hfTree(const int *w,int size)
{
    const int MAX_INT = 100000;
    int min1,min2;
    int x,y;

    length = 2*size;
    elem = new Node[length];

    for(int i = size;i < length;++i)
    {
        elem[i].weight = w[i-size];
        elem[i].data = w[i-size];
        elem[i].parent = elem[i].left = elem[i].right = 0;
    }

    for(int i = size- 1;i > 0;--i)
    {
        min1 = min2 = MAX_INT;
        x = y = 0;
        for(int j = i + 1;j < length;++j)
        {
            if(elem[j].parent == 0)
            {
                if(elem[j].weight < min1)
                {
                    min2 = min1;
                    min1 = elem[j].weight;
                    x = y;
                    y = j;
                }
                else if(elem[j].weight < min2)
                {
                    min2 = elem[j].weight;
                    x = j;
                }
            }
        }
        elem[i].weight = min1 + min2;
        elem[i].left = y;
        elem[i].right = x;
        elem[i].parent = 0;
        elem[x].parent = i;
        elem[y].parent = i;
    }
}

template<class T>
void hfTree<T>::getCode(hfCode result[])
{
    int size = length/2;
    int p;

    for(int i = size;i < length;++i)
    {
        result[i-size].data = elem[i].data;
        p = elem[i].parent;
        while(p)
        {
			result[i-size].value++;
            p = elem[p].parent;
        }
    }
}
int main()
{
	int n;
	int w[MAX_SIZE];
	cin >> n;
	for(int i = 0;i < n;++i)
		cin >> w[i];
		
	hfTree<int> tree(w,n);
	hfTree<int>::hfCode result[MAX_SIZE];
	
	tree.getCode(result);
	long long sum = 0;
	for(int i = 0;i < n;++i)
	{
		sum += result[i].value * result[i].data;
	}
	cout << sum;
	return 0;
}
